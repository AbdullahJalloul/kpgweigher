C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE SJMAIN
OBJECT MODULE PLACED IN sjMain.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE sjMain.c LARGE OPTIMIZE(SIZE) BROWSE MODP2 DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjDefine.h"
   2          #include "sjSerial.h"
   3          //#include "AD5791.h"
   4          //#include "CH374INC.h"
   5          #include "HAL.h"
   6          #include <stdio.h>
   7          
   8          //the MARK of header ender and error and quest and reset
   9          #define  HMARK 0x55     //U
  10          #define  EMARK 0x56 //V
  11          #define  QMARK 0x57 //W
  12          #define  RMARK 0x58 //X
  13            
  14          //the length of the switch table ,
  15          //which must lower than 3fh
  16          #define  LINIT 32 
  17          
  18          //for P1 output
  19          //for P0 output
  20          const unsigned char code tbl[8]={0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};
  21          
  22          void nop()
  23          {
  24   1      }
  25          
  26          
  27          
  28          //delay loop
  29          void swiDelay(unsigned char dl1,unsigned char dl2)
  30          {
  31   1              unsigned char i,j;
  32   1              for(i=0;i<dl1;i++)
  33   1                      for(j=0;j<dl2;j++)
  34   1                              ;
  35   1      }
  36          
  37          /*
  38          void swiAction(unsigned char SwiID)
  39          {
  40                  unsigned char exID;
  41          
  42                  if(SwiID >= sizeof(lut))
  43                          return;
  44          
  45                  exID = lut[SwiID];
  46                  if(exID == 255)
  47                          return;
  48          
  49                  P1 = tbl[(exID&7)];
  50                  P0 = tbl[(exID>>3)];
  51                  swiDelay(0x1f,0xff);
  52          
  53                  P1 = 0xff;
  54                  P0 = 0xff;
  55                  swiDelay(0x06,0xff);
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 2   

  56          }
  57          void swiReset()
  58          {
  59                  unsigned char i;
  60                  for(i=0;i<LINIT;i++)
  61                  {
  62                          swiAction(inittbl[i]);
  63                  }
  64          }
  65          */
  66          unsigned char delayc;
  67          
  68          /*
  69          */
  70          //end interface routine
  71          extern int      test( void );
  72          extern void DBGS(const char* s);
  73          extern void DBG(unsigned char);
  74          
  75          
  76          //extern void btnencode_loop();
  77          unsigned long count = 0;
  78          BOOL once = 0;
  79          void timer_isr(void) interrupt 1 using 1
  80          {
  81   1      //      asp_handler();
  82   1      //      asp_handler2();
  83   1              TF0 = 0; //clear timer
  84   1      }
  85          extern int      test( void );
  86          
  87          #define uchar unsigned char
  88          
  89          uchar code led_code[]={0x77, 0x41,0x3b,0x6b,0x4d,0x6e,0x7e,0x43,0x7f,0x6f,0xff}; //LED显示
  90          /*
  91                                                    0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6
  92                                                    0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xe6,
  93                                0x03,0x62,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xe6,
  94                                0xfd,0x61,0xdB,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xe6,                                          
  95          */
  96          #define LED_HF          0x80//0x02
  97          #define LED_SPACE       0x00//0x00
  98          #define LED_PT          0x80//0x01
  99          #define LEDPT_OP        |
 100          
 101          //bits for LED display
 102          //CP P4.4, DP = P4.3, MP = P4.2
 103          sbit dat1 = P4^3;//P2^2;
 104          sbit clk1 = P4^4;//P2^1;
 105          sbit rst1 = P4^2;//P2^0;
 106          
 107          void d164(uchar c)   //74164串行移位一个数
 108          {
 109   1          uchar i=0;
 110   1           do{  
 111   2              if(c&0x01)     
 112   2                      dat1=1;
 113   2              else
 114   2                              dat1=0;
 115   2                      c>>=1;        //数组tabel中的第N个数向右移动一位
 116   2                       nop(); nop();
 117   2              clk1=0;            //下降沿将数据写入164，拉高时钟端停止，再拉低等待下一次写入
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 3   

 118   2              nop(); nop();
 119   2                      clk1=1;
 120   2                      nop(); nop();
 121   2              clk1=0;
 122   2                      nop(); nop();
 123   2              i++;
 124   2          }
 125   1          while(i<8);
 126   1      }
 127          
 128          //bits for row output
 129          /*
 130          sbit dat2 = P2^5;
 131          sbit clk2 = P2^4;
 132          sbit rst2 = P2^3;
 133          
 134          void c164(uchar c)   //74164串行移位一个bit
 135          {
 136                  if(c)     
 137                          dat2=1;
 138                  else
 139                                  dat2=0;
 140                          nop(); nop();
 141                  clk2=0;            //下降沿将数据写入164，拉高时钟端停止，再拉低等待下一次写入
 142                  nop(); nop();
 143                          clk2=1;
 144                          nop(); nop();
 145                  clk2=0;
 146                          nop(); nop();
 147          }
 148          */
 149          void pause()
 150          {
 151   1              while(1)
 152   1              {
 153   2                      if(sjSerialWaitForOneByte() == '!')     
 154   2                              return;
 155   2              }
 156   1      }
 157          
 158          
 159          #define MAXROWS 16      //max rows for one pan
 160          #define MAXCOLS 14      // pan number
 161          //#define MAXCOLS       16      // pan number
 162          #define FULLCOLS 16 //max cols for
 163          uchar keypos[FULLCOLS];
 164          void sleepms(unsigned int i)
 165          {
 166   1              while(i-- > 0)
 167   1                      ;
 168   1      }
 169          uchar bUpdate = 1;
 170          
 171          
 172          char leds[17]; //led code, total 17 LEDS,
 173          char out_10knob[14]; //data buffer for serial output
 174          
 175          //translate the real led position to ideal led position.
 176          //ideal led arrangement is:  for 10knob there is led postion 0-----10,
 177          //                                                :  for 4 knob there is led postion 11,12 for exp, 13,14,15,16 for val
 178          uchar code disptbls[17] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 179          
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 4   

 180          #define COL_SCALE               10
 181          #define LEDVAL_POS              13
 182          #define LEDEXP_POS              11
 183          
 184          #define COL_100                 5
 185          #define COL_10                  4
 186          #define COL_1                   3
 187          #define COL_P1                  2
 188          #define COL_P01                 1
 189          #define COL_P001                0
 190          
 191                                              //   N001  N01  N1   P1   P10    P100   P1K   P10K    P100K   P1M  Z_SCA    Z_10    Z_1             Z_P1
 192          uchar code knobcol[MAXCOLS] = {0,    1,   2,   3,    4,     5,    6,     7,      8,     9,      10,             11,             12,             
             -13};
 193          
 194          //translate real col value to ideal col value
 195          //uchar code coltbls[16] = {1,    3,   5,   7,    9,   0xff,  13,    11,   12,    10, 0xff,    8,   6,    
             -4,   2,  0};
 196          uchar code coltbls[16] =   {1,    3,   5,   7,    9,    11,   13,  0xff,     0xff, 12, 10,   8,    6, 4,  
             - 2,  0};
 197          //uchar code coltbls[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 198          //translate real row value to ideal row value
 199          //uchar code rowtbls[16] = {1,0,5,6,7,2,3,4,9,8,0xff,0xff,0xff,10,11,2};
 200          uchar code rowtbls[16] = {0xff,0xff,11,9,7,5,3,1,0xff,12,10,8,6,4,2,0};
 201          //uchar code rowtbls[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 202          //parse the column position of 1 in P0 and P1
 203          uchar hitrow[FULLCOLS];
 204          //key value (0-11 are row values)
 205          void getcols(uchar row)
 206          {
 207   1              uchar pv0,pv1,pos;
 208   1              pv0 = P0;
 209   1              pv1 = P1;
 210   1      
 211   1              /*
 212   1              sjSerialSendByte(rowtbls[row]);
 213   1              sjSerialSendByte(pv0);
 214   1              sjSerialSendByte(pv1);
 215   1              sjSerialSendByte('.');
 216   1              pause();
 217   1              */
 218   1              pos = 8;
 219   1              while(pos < 16)
 220   1              {
 221   2                      if((pv1 & 0x01) == 0)
 222   2                      {
 223   3                              if((rowtbls[row] != 0xff) && (coltbls[pos] != 0xff)) //row is valid and col is valid
 224   3                              {
 225   4                                      hitrow[coltbls[pos]] = 1;
 226   4                                      if(keypos[coltbls[pos]] != rowtbls[row]) //rowtbls[row] is the actual key number
 227   4                                      {
 228   5      /*
 229   5                                              sjSerialSendByte(pos);
 230   5                                              sjSerialSendByte(coltbls[pos]);
 231   5                                              sjSerialSendByte(keypos[coltbls[pos]]);
 232   5                                              sjSerialSendByte(row);
 233   5                                              sjSerialSendByte(rowtbls[row]);
 234   5                                              sjSerialSendByte('.');
 235   5      */
 236   5      //                                      pause();
 237   5                                              
 238   5                                              bUpdate = 1;
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 5   

 239   5                                      }
 240   4                                      keypos[coltbls[pos]] = rowtbls[row];
 241   4                              }
 242   3                      }
 243   2                      pos++;
 244   2                      pv1 = pv1 >> 1;
 245   2              }
 246   1              pos = 0;
 247   1              while(pos < 8)
 248   1              {
 249   2                      if((pv0 & 0x01) == 0)
 250   2                      {
 251   3                              if((rowtbls[row] != 0xff) && (coltbls[pos] != 0xff)) 
 252   3                              {
 253   4                                      hitrow[coltbls[pos]] = 1;
 254   4                                      if(keypos[coltbls[pos]] != rowtbls[row])
 255   4                                      {
 256   5      /*                              
 257   5                                              sjSerialSendByte(pos);
 258   5                                              sjSerialSendByte(coltbls[pos]);
 259   5                                              sjSerialSendByte(keypos[coltbls[pos]]);
 260   5                                              sjSerialSendByte(row);
 261   5                                              sjSerialSendByte(rowtbls[row]);
 262   5                                              sjSerialSendByte('.');
 263   5      */
 264   5      //                                      pause();
 265   5                                      
 266   5                                              bUpdate = 1;
 267   5                                      }
 268   4                                      keypos[coltbls[pos]] = rowtbls[row];
 269   4                              }
 270   3                      }
 271   2                      pos++;
 272   2                      pv0 = pv0 >> 1;
 273   2              }
 274   1                      
 275   1      }
 276          //PF = P0,P1
 277          //PI = P2, P4.0, P4.1, P3.2 - P3.7
 278          sbit PI9 = P4^0;
 279          sbit PI10 = P4^1;
 280          sbit PI11 = P3^2;
 281          sbit PI12 = P3^3;
 282          sbit PI13 = P3^4;
 283          sbit PI14 = P3^5;
 284          sbit PI15 = P3^6;
 285          sbit PI16 = P3^7;
 286          
 287          sbit PI1 = P2^0;
 288          sbit PI2 = P2^1;
 289          sbit PI3 = P2^2;
 290          sbit PI4 = P2^3;
 291          sbit PI5 = P2^4;
 292          sbit PI6 = P2^5;
 293          sbit PI7 = P2^6;
 294          sbit PI8 = P2^7;
 295          
 296          
 297          void clearrows()
 298          {
 299   1      /*
 300   1              uchar i;
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 6   

 301   1              for(i = 0; i < MAXROWS; i++) 
 302   1              {
 303   1                      c164(1); //clear out all the output to 1        
 304   1              }
 305   1      */
 306   1              PI1 = 1;        
 307   1              PI2 = 1;
 308   1              PI3 = 1;
 309   1              PI4 = 1;
 310   1              PI5 = 1;
 311   1              PI6 = 1;
 312   1              PI7 = 1;                                                
 313   1              PI8 = 1;        
 314   1              PI9 = 1;        
 315   1              PI10 = 1; 
 316   1              PI11 = 1; 
 317   1              PI12 = 1; 
 318   1              PI13 = 1; 
 319   1              PI14 = 1; 
 320   1              PI15 = 1; 
 321   1              PI16 = 1; 
 322   1      }
 323          void scanrows()
 324          {
 325   1              uchar i = 0;
 326   1              for(i = 0; i < FULLCOLS; i++)
 327   1                      hitrow[i] = 0xff;
 328   1              for(i = 0; i < MAXROWS; i++)
 329   1              {
 330   2              
 331   2              PI1 = (i==0)?0:1;
 332   2              PI2 = (i==1)?0:1;
 333   2              PI3 = (i==2)?0:1;
 334   2              PI4 = (i==3)?0:1;
 335   2      
 336   2              PI5 = (i==4)?0:1;
 337   2              PI6 = (i==5)?0:1;
 338   2              PI7 = (i==6)?0:1;
 339   2              PI8 = (i==7)?0:1;
 340   2              PI9 = (i==8)?0:1;       
 341   2              PI10 = (i==9)?0:1; 
 342   2              PI11 = (i==10)?0:1; 
 343   2              PI12 = (i==11)?0:1; 
 344   2              PI13 = (i==12)?0:1; 
 345   2              PI14 = (i==13)?0:1; 
 346   2              PI15 = (i==14)?0:1; 
 347   2              PI16 = (i==15)?0:1; 
 348   2      
 349   2                      //c164(i);      //only 1 '0' will be shift out
 350   2                      sleepms(100);
 351   2                      getcols(i); //fill the column with current row value
 352   2              }
 353   1              clearrows();
 354   1              for(i = 0; i < FULLCOLS; i++)
 355   1              {
 356   2                      if(hitrow[i] == 0xff)
 357   2                      {
 358   3                              if(keypos[i] != 0xff)
 359   3                                      bUpdate=1;
 360   3                              keypos[i] = 0xff;
 361   3                      }
 362   2              }
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 7   

 363   1      
 364   1      /*
 365   1              uchar i = 0;
 366   1              for(i = 0; i < FULLCOLS; i++)
 367   1                      hitrow[i] = 0xff;
 368   1              for(i = 0; i < MAXROWS; i++)
 369   1              {
 370   1                      c164(i);        //only 1 '0' will be shift out
 371   1                      sleepms(100);
 372   1                      getcols(i); //fill the column with current col value
 373   1              }
 374   1              clearrows();
 375   1              for(i = 0; i < FULLCOLS; i++)
 376   1              {
 377   1                      if(hitrow[i] == 0xff)
 378   1                      {
 379   1                              if(keypos[i] != 0xff)
 380   1                                      bUpdate=1;
 381   1                              keypos[i] = 0xff;
 382   1                      }
 383   1              }
 384   1      */
 385   1      }
 386          void clear_10knob()
 387          {
 388   1              uchar p;
 389   1              for(p = 0;p < 17;p++)
 390   1              {
 391   2                      leds[p] = LED_SPACE; //delight all the lines
 392   2                      out_10knob[p] = '0';
 393   2              }
 394   1      }
 395          void update_10knob()
 396          {
 397   1              uchar pre = 0; //进位
 398   1              uchar head;
 399   1              uchar p,i;
 400   1      
 401   1              leds[11] = led_code[0];// LED_SPACE;
 402   1              for(p = 0;p < 10;p++)
 403   1              {
 404   2                      i = keypos[p] + pre;
 405   2      
 406   2                      if(i == 0xff)
 407   2                              break;
 408   2      //              if(p == 2)              i = i+1; //100mohm start from 1
 409   2                      if(i >= 10)
 410   2                      {
 411   3                              pre = 1;
 412   3                              i = i-10;
 413   3                      }else{
 414   3                              pre = 0;
 415   3                      }
 416   2                      out_10knob[10-p] = i+'0';
 417   2                      if(p != 3) //POINT POSITION
 418   2                              leds[10-p] = led_code[i];
 419   2                      else
 420   2                              leds[10-p] = led_code[i] LEDPT_OP       LED_PT; //set the point
 421   2              }
 422   1              if(pre == 1) //has pre
 423   1              {
 424   2                      out_10knob[0] = '1';
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 8   

 425   2                      leds[0] = led_code[1];
 426   2              }else{
 427   2                      out_10knob[0] = '0';
 428   2                      leds[0] = led_code[0];//LED_SPACE;
 429   2              }
 430   1              if(p < 10)      //invalid value
 431   1              {
 432   2                      clear_10knob();
 433   2                      return;
 434   2              }
 435   1      
 436   1              /*check head
 437   1              head = 0;
 438   1              for(p = 0;p < 7;p++)
 439   1              {
 440   1                      if((leds[p] != led_code[0])&&(leds[p] != LED_SPACE))
 441   1                      {
 442   1                              break;
 443   1                      }
 444   1                      leds[p] = LED_SPACE;
 445   1              }
 446   1              */
 447   1      }
*** WARNING C280 IN LINE 398 OF SJMAIN.C: 'head': unreferenced local variable
 448          void output_10knob()
 449          {
 450   1              uchar p;
 451   1              uchar head = 0; //whether leading non-zero value is found
 452   1              for(p = 0;p < 11;p++)
 453   1              {
 454   2                      if(out_10knob[p] !='0')
 455   2                      {
 456   3                              head = 1;
 457   3                      }
 458   2                      if((p < 7) && (head == 0)) //remove leading zero
 459   2                              continue;
 460   2                      sjSerialSendByte(out_10knob[p]);
 461   2                      if(p == 7)
 462   2                              sjSerialSendByte('.');
 463   2              }
 464   1      }
 465          
 466          //uchar exp;
 467          //uchar val;
 468          void clear_4knob()
 469          {
 470   1              uchar j;
 471   1              for(j = 0; j < 17; j++)
 472   1              {
 473   2                      leds[j] = LED_SPACE;
 474   2              }               
 475   1      
 476   1      //      exp = 0;
 477   1      //      val = 0;
 478   1      
 479   1      }
 480          uchar out_4knob[10];
 481          uchar code2key(uchar c)
 482          {
 483   1              uchar m;
 484   1              for(m=0;m<10;m++)
 485   1              {
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 9   

 486   2                      if(led_code[m] == c)
 487   2                              return m;
 488   2              }
 489   1              return 0xff;
 490   1      }
 491          
 492          void update_4knob()
 493          {
 494   1              uchar i,j,val;
 495   1              i = keypos[COL_SCALE];
 496   1      
 497   1              if(i == 6)      //OFF
 498   1                      return;
 499   1              clear_4knob();
 500   1              if( i >= 7 ) //10^0 ..10^-4
 501   1              {
 502   2                      leds[7] = (i==7)?  led_code[1]:led_code[0];
 503   2                      leds[8] = (i==8)?  led_code[1]:led_code[0];
 504   2                      leds[9] = (i==9)?  led_code[1]:led_code[0];
 505   2                      leds[10]= (i==10)? led_code[1]:led_code[0];
 506   2                      leds[11]= (i==11)? led_code[1]:led_code[0];
 507   2              }else{
 508   2                      leds[7] = led_code[0];
 509   2                      leds[8] = led_code[0];
 510   2                      leds[9] = led_code[0];
 511   2                      leds[10] = led_code[0];
 512   2                      leds[11] = led_code[0];
 513   2                      if((0 <= i) && (i <= 5) ) //11^-3 to 11x10^2
 514   2                      {
 515   3                              for(j = (11-i); j < 12; j++)
 516   3                              {
 517   4                                      leds[j] = led_code[0];
 518   4                              }               
 519   3                              val = keypos[i]; //0-3,1-
 520   3                              if(i < 4)
 521   3                                      leds[9-i] = (val >= 10) ? led_code[1]:led_code[0];
 522   3                              else
 523   3                                      leds[9-i] = (val >= 10) ? led_code[1]:LED_SPACE;
 524   3                              if(val >= 10)
 525   3                              {
 526   4                                      val = val - 10;
 527   4                              }
 528   3                              if(val < 10)
 529   3                                      leds[10-i] = led_code[val];
 530   3                      }
 531   2              }
 532   1              leds[7] = leds[7] LEDPT_OP      LED_PT;
 533   1      }
 534          void output_4knob()
 535          {
 536   1              uchar p,v;
 537   1              uchar head = 0; //whether leading non-zero value is found
 538   1              for(p = 0;p < 12;p++)
 539   1              {
 540   2                      v = code2key(leds[p] & 0x7f);
 541   2                      if(v !=0 && v != 0xff)
 542   2                      {
 543   3                              head = 1;
 544   3                      }
 545   2                      if((p < 7) && (head == 0)) //remove leading zero
 546   2                              continue;
 547   2      
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 10  

 548   2                      if(v != 0xff)
 549   2                              sjSerialSendByte('0'+v);
 550   2                      if(p == 7)
 551   2                              sjSerialSendByte('.');
 552   2              }
 553   1      }
 554          /*
 555          void output_4knob()
 556          {
 557                  uchar p = 0;
 558                  uchar head = 0;
 559                  if(val == 0xff) //off
 560                          return;
 561          
 562                  if(leds[LEDEXP_POS+1] == LED_SPACE)
 563                  {
 564                          for(p = 0;p < 4;p++)
 565                          {
 566                                  if(out_4knob[p] != '0')
 567                                  {
 568                                          head = 1;
 569                                  }
 570                                  if( (p <2) && (head == 0)) //remove leading zero
 571                                          continue;
 572                                  sjSerialSendByte(out_4knob[p]);
 573                                  if(p == 2)
 574                                          sjSerialSendByte('.');
 575                          }
 576                          return;
 577                  }else{
 578                          sjSerialSendByte('1');          
 579                          sjSerialSendByte('e');          
 580                          if(leds[LEDEXP_POS] == LED_HF)
 581                                  sjSerialSendByte('-');          
 582                          else
 583                                  sjSerialSendByte('+');
 584                          sjSerialSendByte(exp+'0');              
 585                  }
 586          }
 587          */
 588          //display 17 led code in leds based on hardware setting
 589          void led_show()
 590          {
 591   1              uchar cnt;
 592   1              /*
 593   1              for(cnt = 0;cnt < 17;cnt++)
 594   1              {
 595   1                      if(cnt == 6)
 596   1                      {
 597   1                              d164(LED_SPACE);d164(LED_SPACE);
 598   1                      }
 599   1                      if(cnt == 11)
 600   1                      {
 601   1                              d164(LED_SPACE);d164(LED_SPACE);d164(LED_SPACE);
 602   1                      }
 603   1                      d164(leds[disptbls[cnt]]);
 604   1              }
 605   1      
 606   1              */
 607   1              for(cnt = 0;cnt < 12;cnt++)
 608   1              {
 609   2                              d164(leds[cnt]);
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 11  

 610   2              }
 611   1              //d164(LED_SPACE);//d164(LED_SPACE);
 612   1      }
 613          
 614          
 615          
 616          void main()
 617          {
 618   1              
 619   1              unsigned char sid;//id of serial to send 
 620   1              uchar type;
 621   1              uchar cnt;
 622   1      //      BYTE temp;
 623   1              long i=1000;
 624   1      
 625   1      
 626   1              IE = 0;//close int
 627   1                                        // S1   CCP  SPI
 628   1      //      P_SW1 = 0x08  ; // 0 0  0 0  1 0   0  0
 629   1              P_SW1 = 0x3C ;  // 0 0  1 1  1 1   0  0
 630   1                                        // X X PWM6  PWM2345 X  S4_S S3_S S2_S
 631   1          P_SW2 = 0x07  ; // 0 0  0      0     0    1    1     1
 632   1      
 633   1              AUXR = 0x10 ;// t0x12  t1x12  m0x6 t2r t2ct t2x12 extram s1st2
 634   1                                       // 0       0      0    1   0     0      0     0
 635   1              T4T3M = 0x88;// t4r  t4ct  t4x12 t4clko t3r t3ct t3x12 t3clk
 636   1                                       //     1     0     0      0      1  0    0     0
 637   1              INT_CLKO = 0x00;  //x ex4 ex3 ex2 x t2 t1 t0
 638   1      
 639   1      
 640   1              sjSerialInit(); //init COM1 and COM2 buffer
 641   1      
 642   1              //CLK_DIV = 0x40; //MCKO_S1 MCKO_S0 ADRJ TX_RX MCLKO_2 CLKS2 S1 S0 //24Mhz
 643   1                                              //      0      1        0    0     0      0       0 0  
 644   1              CLK_DIV = 0x80; //MCKO_S1 MCKO_S0 ADRJ TX_RX MCLKO_2 CLKS2 S1 S0  //12Mhz
 645   1                                              //      1      0        0    0     0      0       0 0  
 646   1      //      init_uart();  //fake serial port 3
 647   1      //      init_uart2(); //fake serial port 4
 648   1      
 649   1      //      asp_set_timer();
 650   1      
 651   1      
 652   1              sid = 0;
 653   1              
 654   1      //      AD5791Init();
 655   1              
 656   1      //      sjRelayInit();
 657   1      
 658   1              /*
 659   1              *       Protocal routine: 
 660   1              *       1.      HMARK sid(!=HMARK) :set sid
 661   1              *   2.  normal HMARK is repeated
 662   1              */
 663   1              
 664   1              //DBGS("STARTUP DONE\r\n");     
 665   1      
 666   1              //test();
 667   1              //mDelaymS(5000);
 668   1      
 669   1      
 670   1              //CH374_PORT_INIT( );  /* CH374接口初始化 */
 671   1      
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 12  

 672   1      
 673   1      //      mDelaymS(50);
 674   1      //      CH374_PORT_INIT( );  /* CH374接口初始化 */
 675   1      //      Init374Device( );  // 初始化USB设备
 676   1      
 677   1      
 678   1      
 679   1              TR1 = 1;                //ENABLE COM1
 680   1              AUXR |= 0x10;   //Enable COM2
 681   1      
 682   1              PT0 = 1;                //improve timer0 interrupt priority
 683   1          ET0 = 1;        //enable timer0 interrupt
 684   1      
 685   1              IE = 0x92;//enable serial int and timer0 interrupt//IE=90
 686   1              IE2 = 1;
 687   1              EA = 1;
 688   1      //      DBGS("\r\nSTARTUP DONE ");
 689   1      //      swiReset();
 690   1              /*
 691   1              *       Protocal routine: 
 692   1              *       1.      HMARK sid(!=HMARK) :set sid
 693   1              *   2.  normal HMARK is repeated
 694   1              */
 695   1      //      swiDelay(0x0f,0xff);
 696   1      //      sjSerialSendByte('!');
 697   1      
 698   1              for(cnt = 0; cnt < MAXCOLS; cnt++) //reset column values
 699   1              {
 700   2                      keypos[cnt] = 0xff;
 701   2      //              c164(1); 
 702   2              }
 703   1              clearrows();    
 704   1              bUpdate = 1;
 705   1      
 706   1              /*for debug
 707   1              for(cnt = 0; cnt < 17; cnt++)
 708   1              {
 709   1                      leds[cnt] = led_code[1];
 710   1              }
 711   1              led_show();
 712   1              while(1)
 713   1              {
 714   1              }
 715   1              */
 716   1              while(1)
 717   1              {
 718   2                      scanrows();
 719   2      
 720   2                      //TESTING
 721   2      /*              
 722   2                      for(cnt = 0;cnt < 10;cnt++)
 723   2                              d164(led_code[cnt]);
 724   2      
 725   2                      for(cnt = 0;cnt < 10;cnt++)
 726   2                              d164(led_code[cnt]  LEDPT_OP LED_PT);
 727   2                      for(cnt = 0;cnt < 4;cnt++)
 728   2                              d164(0xff >> cnt);
 729   2                      pause();
 730   2      
 731   2                      for(cnt = 0;cnt < MAXCOLS+2;cnt++)
 732   2                      {
 733   2                              if(keypos[cnt] >= 10)
C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 13  

 734   2                                      leds[cnt] = led_code[keypos[cnt]-10] LEDPT_OP LED_PT;
 735   2                              else
 736   2                                      leds[cnt] = led_code[keypos[cnt]];
 737   2                      }
 738   2                      led_show();
 739   2      
 740   2                      sleepms(2000);
 741   2      
 742   2                      continue;
 743   2      */              
 744   2                                                      
 745   2                      type = 0; //type = 0
 746   2                      
 747   2                      if((keypos[0] != 0xff) && (keypos[COL_SCALE] == 6))
 748   2                      {
 749   3                              type = 1;
 750   3                              update_10knob();
 751   3                      }else{
 752   3                              if((keypos[COL_SCALE] != 0xff) && (keypos[COL_SCALE] != 6))
 753   3                              {
 754   4                                      type = 2;
 755   4                                      update_4knob();
 756   4                              }else{
 757   4                                      clear_10knob();
 758   4                              }
 759   3                      }
 760   2                      
 761   2                      
 762   2                      
 763   2                      while(sjSerialIsDataWaiting() == TRUE)
 764   2                      {
 765   3                              if(sjSerialWaitForOneByte() == '?')
 766   3                              {
 767   4                                      if(type == 0)
 768   4                                      {
 769   5                                              sjSerialSendByte('0');
 770   5                                      }
 771   4                                      if(type == 1)
 772   4                                      {
 773   5                                              output_10knob();
 774   5                                      }               
 775   4                                      if(type == 2)
 776   4                                      {
 777   5                                              output_4knob();
 778   5                                      }
 779   4                                      sjSerialSendByte(0x0D);
 780   4                                      sjSerialSendByte(0x0A);
 781   4                              }
 782   3                              
 783   3                      }
 784   2                      if(bUpdate == 1)
 785   2                      {
 786   3                              led_show();
 787   3                              bUpdate = 0;
 788   3      //                              pause();
 789   3                      }
 790   2              }
 791   1      }
 792          
 793          
 794          

C51 COMPILER V7.01  SJMAIN                                                                 06/21/2015 16:17:20 PAGE 14  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1599    ----
   CONSTANT SIZE    =     82    ----
   XDATA SIZE       =     80      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
